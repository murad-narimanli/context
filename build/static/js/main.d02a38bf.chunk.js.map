{"version":3,"sources":["Components/Box/index.js","Components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","useState","text","setText","className","onClick","currentState","changeTurn","row","col","board","Game","turn","setturn","winner","setWinner","start","setStart","wins","setWins","w","checkForWin","i","length","el0","el1","el2","sag0","sag1","sag2","sol0","sol1","sol2","id","path","exact","render","to","href","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d02a38bf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Box(props) {\r\n    const [text , setText] = useState('')\r\n    const  toggleText = () =>{\r\n        if (text === ''){\r\n            setText(props.currentState )\r\n            props.changeTurn(props.row ,props.col)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"box\" onClick={toggleText}>{text}</div>\r\n    );\r\n}\r\n\r\nexport default Box","import React , {useState} from \"react\";\r\nimport { BrowserRouter as Router, Route , Link  } from 'react-router-dom';\r\nimport \"./styles.css\"\r\nimport Box from \"../Box\";\r\n\r\nconst board = [[],[],[]]\r\nfunction Game () {\r\n        const [turn , setturn] = useState('X');\r\n        const [winner , setWinner] = useState('');\r\n        const [start , setStart] = useState(false)\r\n        const [wins , setWins] = useState(false)\r\n        const changeTurn = (row , col ) =>{\r\n            setturn( turn => turn === 'X' ? 'O' : 'X'  )\r\n            board[row][col] = turn;\r\n            let w = checkForWin()\r\n            if (!w){\r\n                setWins(true)\r\n                setStart(true)\r\n            }\r\n            else if (w){\r\n                setWinner ( \"'\" + w + \"'\" + '- Wins 😁');\r\n                setStart(true)\r\n\r\n            }\r\n        }\r\n\r\n        const checkForWin = () =>{\r\n            // setir ucun yoxlamaq\r\n            for (let i = 0 ; i < board.length; i++) {\r\n                const row = board[i]\r\n                if(row[0] === row[1] &&  row[1] === row[2]&&row[0] ){\r\n                    return row[0]\r\n                }\r\n            }\r\n            // sutun ucun\r\n            for (let i = 0 ; i < board.length; i++){\r\n                const  el0  = board[0][i]\r\n                const  el1  = board[1][i]\r\n                const  el2  = board[2][i]\r\n\r\n                if (el0===el1 && el1===el2 && el0){\r\n                    return el0\r\n                }\r\n            }\r\n\r\n            // diaqonal\r\n            const sag0 = board[0][0]\r\n            const sag1 = board[1][1]\r\n            const sag2 = board[2][2]\r\n            if (sag0=== sag1 && sag1=== sag2 && sag0){\r\n                return sag0\r\n            }\r\n            const sol0 = board[0][2]\r\n            const sol1 = board[1][1]\r\n            const sol2 = board[2][0]\r\n            if (sol0=== sol1 && sol1=== sol2 && sol0){\r\n                return sol0\r\n            }\r\n            return false\r\n        }\r\n\r\n\r\n         return (\r\n             <div id=\"game\">\r\n                 <Router>\r\n                     <h1 className=\"winner\">\r\n                         Tic-Tac-Toe\r\n                     </h1>\r\n\r\n                     <Route path=\"/\" exact render={\r\n                         () => {\r\n                             return(\r\n                                 <div>\r\n                                     <Link to=\"/play\" className=\"again\">Start game</Link>\r\n                                     <h4 className=\"winner\">NOTE : {turn} starts first</h4>\r\n                                 </div>\r\n                             );\r\n                         }\r\n                     } />\r\n\r\n                     <Route path=\"/play\" exact render={\r\n                         () => {\r\n                             return(\r\n                                <div className=\"maingame\">\r\n                                    {\r\n                                        !wins ? '' : <h2 className=\"winner\">{winner}</h2>\r\n                                    }\r\n                                    <div className=\"row\">\r\n                                        <Box row={0} col={0} currentState={turn} changeTurn={changeTurn} />\r\n                                        <Box row={0} col={1} currentState={turn} changeTurn={changeTurn} />\r\n                                        <Box row={0} col={2} currentState={turn} changeTurn={changeTurn} />\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <Box row={1} col={0} currentState={turn} changeTurn={changeTurn} />\r\n                                        <Box row={1} col={1} currentState={turn} changeTurn={changeTurn} />\r\n                                        <Box row={1} col={2} currentState={turn} changeTurn={changeTurn} />\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <Box row={2} col={0} currentState={turn} changeTurn={changeTurn} />\r\n                                        <Box row={2} col={1} currentState={turn} changeTurn={changeTurn} />\r\n                                        <Box row={2} col={2} currentState={turn} changeTurn={changeTurn} />\r\n                                    </div>\r\n                                    { start ? <a href=\"http://tictactoe11.netlify.app\" className=\"again\"> Play again ☘</a> : '' }\r\n                                </div>\r\n                             );\r\n                         }\r\n                     } />\r\n\r\n\r\n\r\n\r\n                 </Router>\r\n             </div>\r\n           )\r\n}\r\n\r\nexport default Game","import React from 'react';\r\nimport Game from './Components/Game'\r\nfunction App() {\r\n  return <Game/>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker'\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register()\r\n"],"sourceRoot":""}